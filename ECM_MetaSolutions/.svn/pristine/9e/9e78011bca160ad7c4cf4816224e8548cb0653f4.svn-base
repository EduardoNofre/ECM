package com.br.meta.ecm.painel;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JViewport;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.br.meta.ecm.view.ECMView;

public class PainelDePara01 extends JPanel {

	private JViewport viewport;
	
	public static JScrollPane scrollpaneControle = new JScrollPane();
	
	JPanel compareImagen01 = new JPanel();
	
	static DesenhadoPainel myPanel;
	
	public PainelDePara01(){
		
	}
	
	public PainelDePara01(JViewport viewport) {
		
		setOpaque(false);
		
		this.viewport = viewport;

	}
	
	public PainelDePara01 compara01(ECMView dndListener) throws IOException {
		
		BufferedImage buff = ImageIO.read(new File("C:\\DesenhoRetangulo\\page1.png"));	

		final JViewport viewport = new JViewport();	
		
		PainelDePara01.scrollpaneControle.setViewport(viewport);
		
		myPanel = new DesenhadoPainel(buff);	
		
		PainelDePara01 glass = new PainelDePara01(viewport);
		
		final JSlider zoom = new JSlider(0,50,19);
		
		zoom.setPaintTicks(true);
		
		zoom.setMajorTickSpacing(10);
		
		zoom.setOrientation(0);
		
		zoom.addChangeListener(

				new ChangeListener() {
					@Override
					public void stateChanged(ChangeEvent e) {

						myPanel.setScale(zoom.getValue()); 
						
						viewport.setView(myPanel);

						PainelDePara01.scrollpaneControle.setAutoscrolls(true);

						PainelDePara01.scrollpaneControle.setName("compareImagensPainel01");

						PainelDePara01.scrollpaneControle.setBounds(380, 40, 550, 865);

						PainelDePara01.scrollpaneControle.setAlignmentX(10);

						PainelDePara01.scrollpaneControle.setAlignmentY(10);
						
						PainelDePara01.scrollpaneControle.setAutoscrolls(true);	
					}
				  }
				);
		
		JSlider rotate = new JSlider(0,360,0);
		
		rotate.setPaintTicks(true);
		
		rotate.setMajorTickSpacing(90);
		
		rotate.setOrientation(0);
		
		rotate.addChangeListener(

				new ChangeListener() {
					@Override
					public void stateChanged(ChangeEvent e) {

						JSlider slider = (JSlider) e.getSource();
						
						myPanel.setAngle(slider.getValue()); 
						
						viewport.setView(myPanel);
						
						PainelDePara01.scrollpaneControle.setAutoscrolls(true);

						PainelDePara01.scrollpaneControle.setName("compareImagensPainel01");

						PainelDePara01.scrollpaneControle.setBounds(380, 40, 550, 865);

						PainelDePara01.scrollpaneControle.setAlignmentX(10);

						PainelDePara01.scrollpaneControle.setAlignmentY(10);
						
						PainelDePara01.scrollpaneControle.setAutoscrolls(true);	
					}
				  }
				);
		
		
		
		myPanel.setScale(19);
		
		viewport.setView(myPanel);
		
		glass.add(zoom);
		
		glass.add(rotate);	
		
		return glass;

	}
	
	public class DesenhadoPainel extends JPanel {

		private boolean carregaImage;
		
		private double scale = 1;

		private double angle = 0;

		int widthZoom;

		int heightZoom;

		BufferedImage imgBuff;

		public DesenhadoPainel(BufferedImage img) {

			imgBuff = img;
			
		}


		@Override
		protected void paintComponent(Graphics g)//paints obj on the screen
		{
			super.paintComponent(g); //prepares graphic object for drawing

			int originX = getWidth() / 2;

			int originY = getHeight() / 2;
			
			int xOffset = -(imgBuff.getWidth() / 2);

			int yOffset = -(imgBuff.getHeight() / 2);
			
			Graphics2D g2d = (Graphics2D) g.create();

			g2d.translate(originX, originY);

			g2d.scale(scale, scale);

			g2d.rotate(Math.toRadians(angle), 0, 0);

			g2d.drawImage(imgBuff, xOffset, yOffset, null);
			
			setBackground(Color.red);
			
			g2d.dispose();

		}

		public void setAngle(double angle) {

			this.angle = angle;

			System.out.println(" Angulo " + angle);

			if (angle == 90.0 || angle == 91.0 || angle == 92.0
					|| angle == 93.0 || angle == 94.0 || angle == 95.0 || angle == 96.0 || angle == 97.0|| angle == 98.0
					|| angle == 269.0|| angle == 270.0 || angle == 271.0 || angle == 272.0
					|| angle == 273.0 || angle == 274.0 || angle == 275.0 || angle == 276.0 || angle == 277.0 || angle == 278.0) {

				setPreferredSize(new Dimension(heightZoom, widthZoom));

				revalidate();

				repaint();

			} else {

				setPreferredSize(new Dimension(widthZoom, heightZoom));

				revalidate();

				repaint();
			}

			repaint();
		}

		public void setScale(int scale) {

			System.out.println(scale);

			widthZoom = ((imgBuff.getWidth() / 100) * scale);
			heightZoom = ((imgBuff.getHeight() / 100) * scale);

			setPreferredSize(new Dimension(widthZoom, heightZoom));

			revalidate();
			repaint();

			this.scale = (scale / 100d);
			repaint();
		}

		public double getScale() {
			return scale;
		}
						
		@Override
		public void setAutoscrolls(boolean autoscrolls) {
			// TODO Auto-generated method stub
			super.setAutoscrolls(true);
		}
		
		@Override
		public boolean getAutoscrolls() {
			// TODO Auto-generated method stub
			return super.getAutoscrolls();
		}
	}

}
